//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""AimBar"",
            ""id"": ""8d86f4fa-b6d8-474e-8be1-75f45e163343"",
            ""actions"": [
                {
                    ""name"": ""BreakBlock"",
                    ""type"": ""Button"",
                    ""id"": ""5abbc5a4-093d-42c0-9ccc-2d5f13b7ca4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchTool"",
                    ""type"": ""Button"",
                    ""id"": ""70d3373d-48a4-4bac-9e5b-9b3fc4b35e95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a209ff9-8014-4f81-968d-a8b65526e938"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BreakBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e62ac376-4ea8-46b7-96de-b74b5b0ca8b6"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BreakBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""952692b4-8e85-4a20-a6bc-cd56fe528889"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b197ce1-417d-4523-9a15-c46c9d1c35ca"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main"",
            ""id"": ""940034a8-f414-43e6-8041-b43267fe4db5"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ad9772e6-922b-45a5-b8cc-36dd60b5a67f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdfe4faa-df0b-40a4-9e7e-9d106c9b3009"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AimBar
        m_AimBar = asset.FindActionMap("AimBar", throwIfNotFound: true);
        m_AimBar_BreakBlock = m_AimBar.FindAction("BreakBlock", throwIfNotFound: true);
        m_AimBar_SwitchTool = m_AimBar.FindAction("SwitchTool", throwIfNotFound: true);
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Pause = m_Main.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AimBar
    private readonly InputActionMap m_AimBar;
    private IAimBarActions m_AimBarActionsCallbackInterface;
    private readonly InputAction m_AimBar_BreakBlock;
    private readonly InputAction m_AimBar_SwitchTool;
    public struct AimBarActions
    {
        private @Control m_Wrapper;
        public AimBarActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @BreakBlock => m_Wrapper.m_AimBar_BreakBlock;
        public InputAction @SwitchTool => m_Wrapper.m_AimBar_SwitchTool;
        public InputActionMap Get() { return m_Wrapper.m_AimBar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimBarActions set) { return set.Get(); }
        public void SetCallbacks(IAimBarActions instance)
        {
            if (m_Wrapper.m_AimBarActionsCallbackInterface != null)
            {
                @BreakBlock.started -= m_Wrapper.m_AimBarActionsCallbackInterface.OnBreakBlock;
                @BreakBlock.performed -= m_Wrapper.m_AimBarActionsCallbackInterface.OnBreakBlock;
                @BreakBlock.canceled -= m_Wrapper.m_AimBarActionsCallbackInterface.OnBreakBlock;
                @SwitchTool.started -= m_Wrapper.m_AimBarActionsCallbackInterface.OnSwitchTool;
                @SwitchTool.performed -= m_Wrapper.m_AimBarActionsCallbackInterface.OnSwitchTool;
                @SwitchTool.canceled -= m_Wrapper.m_AimBarActionsCallbackInterface.OnSwitchTool;
            }
            m_Wrapper.m_AimBarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BreakBlock.started += instance.OnBreakBlock;
                @BreakBlock.performed += instance.OnBreakBlock;
                @BreakBlock.canceled += instance.OnBreakBlock;
                @SwitchTool.started += instance.OnSwitchTool;
                @SwitchTool.performed += instance.OnSwitchTool;
                @SwitchTool.canceled += instance.OnSwitchTool;
            }
        }
    }
    public AimBarActions @AimBar => new AimBarActions(this);

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Pause;
    public struct MainActions
    {
        private @Control m_Wrapper;
        public MainActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Main_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IAimBarActions
    {
        void OnBreakBlock(InputAction.CallbackContext context);
        void OnSwitchTool(InputAction.CallbackContext context);
    }
    public interface IMainActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
